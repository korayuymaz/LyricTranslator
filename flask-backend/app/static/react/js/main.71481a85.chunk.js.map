{"version":3,"sources":["serviceWorker.js","components/SignIn.js","components/MyProfile.js","components/CurrentlyPlaying.js","index.js"],"names":["Boolean","window","location","hostname","match","SignIn","props","state","url","token","toString","replaceAll","handleUrl","bind","href","this","id","onClick","className","React","Component","MyProfile","currentlyPlayingUrl","signOutUrl","handleCurrentlyPlaying","handleSignOut","CurrentlyPlaying","artist","album_image","song_name","songName","coverUrl","class","src","alt","page","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCQSC,G,uDAtBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAKP,OAAOQ,MAAMD,IAAIE,WAAWC,WAAW,OAAQ,KAExD,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALF,E,wDAQfZ,OAAOC,SAASY,KAAOC,KAAKR,MAAMC,M,+BAGlC,OACI,6BACI,yBAAKQ,GAAG,MAAMC,QAASF,KAAKH,WACxB,0BAAMM,UAAU,aAAhB,WACA,yBAAKF,GAAG,iB,GAhBPG,IAAMC,YCgCZC,E,kDA/BX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTe,oBAAqBrB,OAAOC,SAASY,KAAO,oBAC5CS,WAAYtB,OAAOC,SAASY,KAAO,YAEvC,EAAKU,uBAAyB,EAAKA,uBAAuBX,KAA5B,gBAC9B,EAAKY,cAAgB,EAAKA,cAAcZ,KAAnB,gBAPN,E,qEAUfZ,OAAOC,SAASY,KAAOC,KAAKR,MAAMe,sB,sCAGlCrB,OAAOC,SAASY,KAAOC,KAAKR,MAAMgB,a,+BAGlC,OACI,6BACI,yBAAKP,GAAG,MAAMC,QAASF,KAAKS,uBAAwBN,UAAU,UAC1D,0BAAMA,UAAU,aAAhB,qBACA,yBAAKF,GAAG,YAEZ,yBAAKA,GAAG,MAAMC,QAASF,KAAKU,eACxB,0BAAMP,UAAU,aAAhB,YACA,yBAAKF,GAAG,iB,GAzBJG,IAAMC,WCkEfM,G,wDAlEX,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACToB,OAAQ1B,OAAOQ,MAAMkB,OACrBC,YAAa3B,OAAOQ,MAAMmB,YAC1BC,UAAW5B,OAAOQ,MAAMoB,WALb,E,qDASf,IAAMC,EAAWf,KAAKR,MAAMsB,UAAUnB,WAAWC,WAAW,OAAQ,IAAIA,WAAW,QAAS,IACtFoB,EAAWhB,KAAKR,MAAMqB,YAAYlB,WAAWC,WAAW,OAAQ,IAChEgB,EAASZ,KAAKR,MAAMoB,OAAOjB,WAAWC,WAAW,OAAQ,IAAIA,WAAW,QAAS,KACvF,OACI,yBAAKqB,MAAM,qBACP,yBAAKC,IAAKF,EAAUG,IAAKJ,IACzB,4BAAKA,GACL,4BAAKH,GACL,8lD,GAlBeR,IAAMC,YCMX,YAAtBnB,OAAOQ,MAAM0B,KACbC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAEC,eAAtBtC,OAAOQ,MAAM0B,KACpBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAEC,sBAAtBtC,OAAOQ,MAAM0B,MACpBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SJ8G1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.71481a85.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../styles/sign-in.css';\r\n\r\nclass SignIn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            url: window.token.url.toString().replaceAll(\"amp;\", \"\")\r\n        };\r\n        this.handleUrl = this.handleUrl.bind(this);\r\n    }\r\n    handleUrl(){\r\n        window.location.href = this.state.url\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div id='btn' onClick={this.handleUrl}>\r\n                    <span className=\"no_select\">Sign In</span>\r\n                    <div id=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignIn;\r\n","import React from 'react';\r\nimport '../styles/sign-in.css';\r\n\r\nclass MyProfile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentlyPlayingUrl: window.location.href + 'currently_playing',\r\n            signOutUrl: window.location.href + 'sign_out'\r\n        };\r\n        this.handleCurrentlyPlaying = this.handleCurrentlyPlaying.bind(this);\r\n        this.handleSignOut = this.handleSignOut.bind(this);\r\n    }\r\n    handleCurrentlyPlaying(){\r\n        window.location.href = this.state.currentlyPlayingUrl\r\n    }\r\n    handleSignOut(){\r\n        window.location.href = this.state.signOutUrl\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div id='btn' onClick={this.handleCurrentlyPlaying} className=\"button\">\r\n                    <span className=\"no_select\">Currently Playing</span>\r\n                    <div id=\"circle\"></div>\r\n                </div>\r\n                <div id='btn' onClick={this.handleSignOut}>\r\n                    <span className=\"no_select\">Sign Out</span>\r\n                    <div id=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyProfile;\r\n","import React from 'react';\r\nimport '../styles/currently-playing.css';\r\nclass CurrentlyPlaying extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            artist: window.token.artist,\r\n            album_image: window.token.album_image,\r\n            song_name: window.token.song_name,\r\n        };\r\n    }\r\n    render() {\r\n        const songName = this.state.song_name.toString().replaceAll(\"amp;\", \"\").replaceAll(\"&#39;\", \"\");\r\n        const coverUrl = this.state.album_image.toString().replaceAll(\"amp;\", \"\");\r\n        const artist = this.state.artist.toString().replaceAll(\"amp;\", \"\").replaceAll(\"&#39;\", \"'\");\r\n        return(\r\n            <div class=\"currently-playing\">\r\n                <img src={coverUrl} alt={songName}/>\r\n                <h1>{songName}</h1>\r\n                <h2>{artist}</h2>\r\n                <p>'Yeah\\n' +\r\n               '\\n' +\r\n               'I\\'ve been tryna call\\n' +\r\n               'I\\'ve been on my own for long enough\\n' +\r\n               'Maybe you can show me how to love, maybe\\n' +\r\n               'I\\'m going through withdrawals\\n' +\r\n               'You don\\'t even have to do too much\\n' +\r\n               'You can turn me on with just a touch, baby\\n' +\r\n               '\\n' +\r\n               'I look around and\\n' +\r\n               'Sin City\\'s cold and empty (Oh)\\n' +\r\n               'No one\\'s around to judge me (Oh)\\n' +\r\n               'I can\\'t see clearly when you\\'re gone\\n' +\r\n               '\\n' +\r\n               'I said, ooh, I\\'m blinded by the lights\\n' +\r\n               'No, I can\\'t sleep until I feel your touch\\n' +\r\n               'I said, ooh, I\\'m drowning in the night\\n' +\r\n               'Oh, when I\\'m like this, you\\'re the one I trust\\n' +\r\n               'Hey, hey, hey\\n' +\r\n               '\\n' +\r\n               'I\\'m running out of time\\n' +\r\n               '\\'Cause I can see the sun light up the sky\\n' +\r\n               'So I hit the road in overdrive, baby, oh\\n' +\r\n               '\\n' +\r\n               'The city\\'s cold and empty (Oh)\\n' +\r\n               'No one\\'s around to judge me (Oh)\\n' +\r\n               'I can\\'t see clearly when you\\'re gone\\n' +\r\n               '\\n' +\r\n               'I said, ooh, I\\'m blinded by the lights\\n' +\r\n               'No, I can\\'t sleep until I feel your touch\\n' +\r\n               'I said, ooh, I\\'m drowning in the night\\n' +\r\n               'Oh, when I\\'m like this, you\\'re the one I trust\\n' +\r\n               '\\n' +\r\n               'I\\'m just walking by to let you know (By to let you know)\\n' +\r\n               'I can never say it on the phone (Say it on the phone)\\n' +\r\n               'Will never let you go this time (Ooh)\\n' +\r\n               '\\n' +\r\n               'I said, ooh, I\\'m blinded by the lights\\n' +\r\n               'No, I can\\'t sleep until I feel your touch\\n' +\r\n               'Hey, hey, hey\\n' +\r\n               'Hey, hey, hey\\n' +\r\n               '\\n' +\r\n               'I said, ooh, I\\'m blinded by the lights\\n' +\r\n               'No, I can\\'t sleep until I feel your touch'</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrentlyPlaying;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport SignIn from \"./components/SignIn\";\r\nimport MyProfile from \"./components/MyProfile\";\r\nimport CurrentlyPlaying from \"./components/CurrentlyPlaying\";\r\n\r\nif (window.token.page === 'sign_in') {\r\n    ReactDOM.render(\r\n        <SignIn/>,\r\n        document.getElementById('root')\r\n    );\r\n} else if (window.token.page === 'my_profile') {\r\n    ReactDOM.render(\r\n        <MyProfile/>,\r\n        document.getElementById('root')\r\n    );\r\n} else if (window.token.page === 'currently_playing') {\r\n    ReactDOM.render(\r\n        <CurrentlyPlaying/>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}